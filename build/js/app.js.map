{"version":3,"sources":["app.js"],"names":["fetch","then","data","json","res","labels","map","day","amount","window","outerWidth","Chart","defaults","font","size","type","datasets","backgroundColor","context","dataIndex","hoverBackgroundColor","borderSkipped","borderRadius","datalabales","display","options","onHover","event","chartElement","native","target","style","cursor","scales","y","beginAtZero","ticks","grid","x","borderWidth","color","plugins","legend","tooltip","caretSize","yAlign","xAlign","displayColors","bodyFont","family","weight","width","chart","Math","round","callbacks","title","tooltipItems","label","dataset","parsed","Intl","NumberFormat","currency","format","catch","error","console","log"],"mappings":"AAAAA,MAAM,sBACDC,KAAKC,GAAQA,EAAKC,QAClBF,KAAKG,IAEF,MAAMC,EAASD,EAAIE,IAAKJ,GAASA,EAAKK,KAChCC,EAASJ,EAAIE,IAAKJ,GAASA,EAAKM,QAG/BC,OAAOC,WAAa,IACnBC,MAAMC,SAASC,KAAKC,KAAO,GAE3BH,MAAMC,SAASC,KAAKC,KAAO,GAqHnB,IAAIH,MAAM,QAvEX,CACXI,KAAM,MACNb,KA3CS,CACTG,OAAQA,EACRW,SAAU,CACN,CACId,KAAMM,EACNS,gBAAiB,SAASC,GAEtB,OAAiB,IADHA,EAAQC,UACD,qBAAuB,qBAEhDC,qBAAsB,SAAUF,GAE5B,OAAiB,IADHA,EAAQC,UACD,0BAA4B,0BAErDE,eAAe,EACfC,aAAc,EACdC,YAAa,CACTC,SAAS,MA4BrBC,QAAS,CACPC,QAAS,CAACC,EAAOC,KACfD,EAAME,OAAOC,OAAOC,MAAMC,OAASJ,EAAa,GAC5C,UACA,WAENK,OAAQ,CACNC,EAAG,CACDV,SAAS,EACTW,aAAa,EACbC,MAAO,CACLZ,SAAS,GAEXa,KAAM,CACJb,SAAS,IAGbc,EAAG,CACDD,KAAM,CACJb,SAAS,EACTe,YAAa,GAEfH,MAAO,CACLZ,SAAS,EACTgB,MAAO,uBAIbC,QAAS,CACPC,OAAQ,CACNlB,SAAS,GAEXmB,QAAS,CACPC,UAAW,EAEXC,OAAQ,SACRC,OAAQ,SACRC,eAAe,EACfC,SAAU,CACRC,OAAQ,UACRC,OAAQ,IACRpC,KAAOI,IACL,IAAIiC,EAAQjC,EAAQkC,MAAMD,MAE1B,OADWE,KAAKC,MAAMH,EAAQ,KAGhCX,MAAO,qBAETe,UAAW,CACTC,MAtEUC,GACX,GAsECC,MApEUxC,IAClB,IAAIwC,EAAQxC,EAAQyC,QAAQD,OAAS,GAWrC,OATIA,IACFA,GAAS,MAEc,OAArBxC,EAAQ0C,OAAO1B,IACjBwB,GAAS,IAAIG,KAAKC,aAAa,QAAS,CACtC/B,MAAO,WACPgC,SAAU,QACTC,OAAO9C,EAAQ0C,OAAO1B,IAEpBwB,WA4EdO,MAAMC,GAASC,QAAQC,IAAIF","file":"app.js","sourcesContent":["fetch(\"build/js/data.json\")\r\n    .then(data => data.json())\r\n    .then(res => {\r\n        \r\n        const labels = res.map((data) => data.day);\r\n        const amount = res.map((data) => data.amount);\r\n\r\n        const setFont = () => {\r\n            if(window.outerWidth > 375) {\r\n                Chart.defaults.font.size = 16;\r\n            } else {\r\n                Chart.defaults.font.size = 11;\r\n            }\r\n        }\r\n        setFont();\r\n\r\n        const data = {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    data: amount,\r\n                    backgroundColor: function(context) {\r\n                        const index = context.dataIndex;\r\n                        return index === 2 ? 'hsl(186, 34%, 60%)' : 'hsl(10, 79%, 65%)';\r\n                    },\r\n                    hoverBackgroundColor: function (context) {\r\n                        const index = context.dataIndex;\r\n                        return index === 2 ? 'rgba(118, 181, 188, .7)' : 'rgba(236, 119, 95, .7)'\r\n                    },\r\n                    borderSkipped: false,\r\n                    borderRadius: 4,\r\n                    datalabales: {\r\n                        display: true\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n\r\n        //custom tooltip\r\n        const titleTooltip = (tooltipItems) => {\r\n            return \"\";\r\n        };\r\n        const labelTooltip = (context) => {\r\n            let label = context.dataset.label || \"\";\r\n          \r\n            if (label) {\r\n              label += \": \";\r\n            }\r\n            if (context.parsed.y !== null) {\r\n              label += new Intl.NumberFormat(\"en-US\", {\r\n                style: \"currency\",\r\n                currency: \"USD\",\r\n              }).format(context.parsed.y);\r\n            }\r\n            return label;\r\n        };\r\n\r\n        const config = {\r\n            type: \"bar\",\r\n            data,\r\n            options: {\r\n              onHover: (event, chartElement) => {\r\n                event.native.target.style.cursor = chartElement[0]\r\n                  ? \"pointer\"\r\n                  : \"default\";\r\n              },\r\n              scales: {\r\n                y: {\r\n                  display: false,\r\n                  beginAtZero: true,\r\n                  ticks: {\r\n                    display: false,\r\n                  },\r\n                  grid: {\r\n                    display: false,\r\n                  }\r\n                },\r\n                x: {\r\n                  grid: {\r\n                    display: false,\r\n                    borderWidth: 0,\r\n                  },\r\n                  ticks: {\r\n                    display: true,\r\n                    color: \"hsl(28, 10%, 53%)\",\r\n                  }\r\n                }\r\n              },\r\n              plugins: {\r\n                legend: {\r\n                  display: false,\r\n                },\r\n                tooltip: {\r\n                  caretSize: 0,\r\n                  // footerSpacing: 10,\r\n                  yAlign: \"bottom\",\r\n                  xAlign: \"center\",\r\n                  displayColors: false,\r\n                  bodyFont: {\r\n                    family: \"DM Sans\",\r\n                    weight: 700,\r\n                    size: (context) => {\r\n                      let width = context.chart.width;\r\n                      let size = Math.round(width / 25);\r\n                      return size;\r\n                    },\r\n                    color: \"hsl(10, 79%, 65%)\",\r\n                  },\r\n                  callbacks: {\r\n                    title: titleTooltip,\r\n                    label: labelTooltip,\r\n                  },\r\n                },\r\n              },\r\n            }\r\n          };\r\n\r\n          // Responsive Font\r\n          function responsiveFont() {\r\n            if(window.innerWidth > 375) {\r\n                Chart.defaults.font.size = 16;\r\n            } else {\r\n                Chart.defaults.font.size = 11;\r\n            }\r\n            chart.update();\r\n          }\r\n\r\n          //Creating the Chart\r\n          const chart = new Chart('chart', config);\r\n    })\r\n    .catch(error => console.log(error));\r\n"]}